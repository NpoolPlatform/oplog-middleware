// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/oplog-middleware/pkg/db/ent/oplog"
	"github.com/google/uuid"
)

// OpLogCreate is the builder for creating a OpLog entity.
type OpLogCreate struct {
	config
	mutation *OpLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (olc *OpLogCreate) SetCreatedAt(u uint32) *OpLogCreate {
	olc.mutation.SetCreatedAt(u)
	return olc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (olc *OpLogCreate) SetNillableCreatedAt(u *uint32) *OpLogCreate {
	if u != nil {
		olc.SetCreatedAt(*u)
	}
	return olc
}

// SetUpdatedAt sets the "updated_at" field.
func (olc *OpLogCreate) SetUpdatedAt(u uint32) *OpLogCreate {
	olc.mutation.SetUpdatedAt(u)
	return olc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (olc *OpLogCreate) SetNillableUpdatedAt(u *uint32) *OpLogCreate {
	if u != nil {
		olc.SetUpdatedAt(*u)
	}
	return olc
}

// SetDeletedAt sets the "deleted_at" field.
func (olc *OpLogCreate) SetDeletedAt(u uint32) *OpLogCreate {
	olc.mutation.SetDeletedAt(u)
	return olc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (olc *OpLogCreate) SetNillableDeletedAt(u *uint32) *OpLogCreate {
	if u != nil {
		olc.SetDeletedAt(*u)
	}
	return olc
}

// SetAutoID sets the "auto_id" field.
func (olc *OpLogCreate) SetAutoID(u uint32) *OpLogCreate {
	olc.mutation.SetAutoID(u)
	return olc
}

// SetAppID sets the "app_id" field.
func (olc *OpLogCreate) SetAppID(u uuid.UUID) *OpLogCreate {
	olc.mutation.SetAppID(u)
	return olc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (olc *OpLogCreate) SetNillableAppID(u *uuid.UUID) *OpLogCreate {
	if u != nil {
		olc.SetAppID(*u)
	}
	return olc
}

// SetUserID sets the "user_id" field.
func (olc *OpLogCreate) SetUserID(u uuid.UUID) *OpLogCreate {
	olc.mutation.SetUserID(u)
	return olc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (olc *OpLogCreate) SetNillableUserID(u *uuid.UUID) *OpLogCreate {
	if u != nil {
		olc.SetUserID(*u)
	}
	return olc
}

// SetMethod sets the "method" field.
func (olc *OpLogCreate) SetMethod(s string) *OpLogCreate {
	olc.mutation.SetMethod(s)
	return olc
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (olc *OpLogCreate) SetNillableMethod(s *string) *OpLogCreate {
	if s != nil {
		olc.SetMethod(*s)
	}
	return olc
}

// SetArguments sets the "arguments" field.
func (olc *OpLogCreate) SetArguments(s string) *OpLogCreate {
	olc.mutation.SetArguments(s)
	return olc
}

// SetNillableArguments sets the "arguments" field if the given value is not nil.
func (olc *OpLogCreate) SetNillableArguments(s *string) *OpLogCreate {
	if s != nil {
		olc.SetArguments(*s)
	}
	return olc
}

// SetCurValue sets the "cur_value" field.
func (olc *OpLogCreate) SetCurValue(s string) *OpLogCreate {
	olc.mutation.SetCurValue(s)
	return olc
}

// SetNillableCurValue sets the "cur_value" field if the given value is not nil.
func (olc *OpLogCreate) SetNillableCurValue(s *string) *OpLogCreate {
	if s != nil {
		olc.SetCurValue(*s)
	}
	return olc
}

// SetHumanReadable sets the "human_readable" field.
func (olc *OpLogCreate) SetHumanReadable(s string) *OpLogCreate {
	olc.mutation.SetHumanReadable(s)
	return olc
}

// SetNillableHumanReadable sets the "human_readable" field if the given value is not nil.
func (olc *OpLogCreate) SetNillableHumanReadable(s *string) *OpLogCreate {
	if s != nil {
		olc.SetHumanReadable(*s)
	}
	return olc
}

// SetResult sets the "result" field.
func (olc *OpLogCreate) SetResult(s string) *OpLogCreate {
	olc.mutation.SetResult(s)
	return olc
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (olc *OpLogCreate) SetNillableResult(s *string) *OpLogCreate {
	if s != nil {
		olc.SetResult(*s)
	}
	return olc
}

// SetFailReason sets the "fail_reason" field.
func (olc *OpLogCreate) SetFailReason(s string) *OpLogCreate {
	olc.mutation.SetFailReason(s)
	return olc
}

// SetNillableFailReason sets the "fail_reason" field if the given value is not nil.
func (olc *OpLogCreate) SetNillableFailReason(s *string) *OpLogCreate {
	if s != nil {
		olc.SetFailReason(*s)
	}
	return olc
}

// SetElapsedMillisecs sets the "elapsed_millisecs" field.
func (olc *OpLogCreate) SetElapsedMillisecs(u uint32) *OpLogCreate {
	olc.mutation.SetElapsedMillisecs(u)
	return olc
}

// SetNillableElapsedMillisecs sets the "elapsed_millisecs" field if the given value is not nil.
func (olc *OpLogCreate) SetNillableElapsedMillisecs(u *uint32) *OpLogCreate {
	if u != nil {
		olc.SetElapsedMillisecs(*u)
	}
	return olc
}

// SetID sets the "id" field.
func (olc *OpLogCreate) SetID(u uuid.UUID) *OpLogCreate {
	olc.mutation.SetID(u)
	return olc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (olc *OpLogCreate) SetNillableID(u *uuid.UUID) *OpLogCreate {
	if u != nil {
		olc.SetID(*u)
	}
	return olc
}

// Mutation returns the OpLogMutation object of the builder.
func (olc *OpLogCreate) Mutation() *OpLogMutation {
	return olc.mutation
}

// Save creates the OpLog in the database.
func (olc *OpLogCreate) Save(ctx context.Context) (*OpLog, error) {
	var (
		err  error
		node *OpLog
	)
	if err := olc.defaults(); err != nil {
		return nil, err
	}
	if len(olc.hooks) == 0 {
		if err = olc.check(); err != nil {
			return nil, err
		}
		node, err = olc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OpLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = olc.check(); err != nil {
				return nil, err
			}
			olc.mutation = mutation
			if node, err = olc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(olc.hooks) - 1; i >= 0; i-- {
			if olc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = olc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, olc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OpLog)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OpLogMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (olc *OpLogCreate) SaveX(ctx context.Context) *OpLog {
	v, err := olc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (olc *OpLogCreate) Exec(ctx context.Context) error {
	_, err := olc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (olc *OpLogCreate) ExecX(ctx context.Context) {
	if err := olc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (olc *OpLogCreate) defaults() error {
	if _, ok := olc.mutation.CreatedAt(); !ok {
		if oplog.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized oplog.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := oplog.DefaultCreatedAt()
		olc.mutation.SetCreatedAt(v)
	}
	if _, ok := olc.mutation.UpdatedAt(); !ok {
		if oplog.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized oplog.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := oplog.DefaultUpdatedAt()
		olc.mutation.SetUpdatedAt(v)
	}
	if _, ok := olc.mutation.DeletedAt(); !ok {
		if oplog.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized oplog.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := oplog.DefaultDeletedAt()
		olc.mutation.SetDeletedAt(v)
	}
	if _, ok := olc.mutation.AppID(); !ok {
		if oplog.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized oplog.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := oplog.DefaultAppID()
		olc.mutation.SetAppID(v)
	}
	if _, ok := olc.mutation.UserID(); !ok {
		if oplog.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized oplog.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := oplog.DefaultUserID()
		olc.mutation.SetUserID(v)
	}
	if _, ok := olc.mutation.Method(); !ok {
		v := oplog.DefaultMethod
		olc.mutation.SetMethod(v)
	}
	if _, ok := olc.mutation.Arguments(); !ok {
		v := oplog.DefaultArguments
		olc.mutation.SetArguments(v)
	}
	if _, ok := olc.mutation.CurValue(); !ok {
		v := oplog.DefaultCurValue
		olc.mutation.SetCurValue(v)
	}
	if _, ok := olc.mutation.HumanReadable(); !ok {
		v := oplog.DefaultHumanReadable
		olc.mutation.SetHumanReadable(v)
	}
	if _, ok := olc.mutation.Result(); !ok {
		v := oplog.DefaultResult
		olc.mutation.SetResult(v)
	}
	if _, ok := olc.mutation.FailReason(); !ok {
		v := oplog.DefaultFailReason
		olc.mutation.SetFailReason(v)
	}
	if _, ok := olc.mutation.ElapsedMillisecs(); !ok {
		v := oplog.DefaultElapsedMillisecs
		olc.mutation.SetElapsedMillisecs(v)
	}
	if _, ok := olc.mutation.ID(); !ok {
		if oplog.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized oplog.DefaultID (forgotten import ent/runtime?)")
		}
		v := oplog.DefaultID()
		olc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (olc *OpLogCreate) check() error {
	if _, ok := olc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OpLog.created_at"`)}
	}
	if _, ok := olc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OpLog.updated_at"`)}
	}
	if _, ok := olc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "OpLog.deleted_at"`)}
	}
	if _, ok := olc.mutation.AutoID(); !ok {
		return &ValidationError{Name: "auto_id", err: errors.New(`ent: missing required field "OpLog.auto_id"`)}
	}
	return nil
}

func (olc *OpLogCreate) sqlSave(ctx context.Context) (*OpLog, error) {
	_node, _spec := olc.createSpec()
	if err := sqlgraph.CreateNode(ctx, olc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (olc *OpLogCreate) createSpec() (*OpLog, *sqlgraph.CreateSpec) {
	var (
		_node = &OpLog{config: olc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: oplog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: oplog.FieldID,
			},
		}
	)
	_spec.OnConflict = olc.conflict
	if id, ok := olc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := olc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: oplog.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := olc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: oplog.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := olc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: oplog.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := olc.mutation.AutoID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: oplog.FieldAutoID,
		})
		_node.AutoID = value
	}
	if value, ok := olc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: oplog.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := olc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: oplog.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := olc.mutation.Method(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oplog.FieldMethod,
		})
		_node.Method = value
	}
	if value, ok := olc.mutation.Arguments(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oplog.FieldArguments,
		})
		_node.Arguments = value
	}
	if value, ok := olc.mutation.CurValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oplog.FieldCurValue,
		})
		_node.CurValue = value
	}
	if value, ok := olc.mutation.HumanReadable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oplog.FieldHumanReadable,
		})
		_node.HumanReadable = value
	}
	if value, ok := olc.mutation.Result(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oplog.FieldResult,
		})
		_node.Result = value
	}
	if value, ok := olc.mutation.FailReason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oplog.FieldFailReason,
		})
		_node.FailReason = value
	}
	if value, ok := olc.mutation.ElapsedMillisecs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: oplog.FieldElapsedMillisecs,
		})
		_node.ElapsedMillisecs = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OpLog.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OpLogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (olc *OpLogCreate) OnConflict(opts ...sql.ConflictOption) *OpLogUpsertOne {
	olc.conflict = opts
	return &OpLogUpsertOne{
		create: olc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OpLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (olc *OpLogCreate) OnConflictColumns(columns ...string) *OpLogUpsertOne {
	olc.conflict = append(olc.conflict, sql.ConflictColumns(columns...))
	return &OpLogUpsertOne{
		create: olc,
	}
}

type (
	// OpLogUpsertOne is the builder for "upsert"-ing
	//  one OpLog node.
	OpLogUpsertOne struct {
		create *OpLogCreate
	}

	// OpLogUpsert is the "OnConflict" setter.
	OpLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *OpLogUpsert) SetCreatedAt(v uint32) *OpLogUpsert {
	u.Set(oplog.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OpLogUpsert) UpdateCreatedAt() *OpLogUpsert {
	u.SetExcluded(oplog.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OpLogUpsert) AddCreatedAt(v uint32) *OpLogUpsert {
	u.Add(oplog.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OpLogUpsert) SetUpdatedAt(v uint32) *OpLogUpsert {
	u.Set(oplog.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OpLogUpsert) UpdateUpdatedAt() *OpLogUpsert {
	u.SetExcluded(oplog.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OpLogUpsert) AddUpdatedAt(v uint32) *OpLogUpsert {
	u.Add(oplog.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OpLogUpsert) SetDeletedAt(v uint32) *OpLogUpsert {
	u.Set(oplog.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OpLogUpsert) UpdateDeletedAt() *OpLogUpsert {
	u.SetExcluded(oplog.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OpLogUpsert) AddDeletedAt(v uint32) *OpLogUpsert {
	u.Add(oplog.FieldDeletedAt, v)
	return u
}

// SetAutoID sets the "auto_id" field.
func (u *OpLogUpsert) SetAutoID(v uint32) *OpLogUpsert {
	u.Set(oplog.FieldAutoID, v)
	return u
}

// UpdateAutoID sets the "auto_id" field to the value that was provided on create.
func (u *OpLogUpsert) UpdateAutoID() *OpLogUpsert {
	u.SetExcluded(oplog.FieldAutoID)
	return u
}

// AddAutoID adds v to the "auto_id" field.
func (u *OpLogUpsert) AddAutoID(v uint32) *OpLogUpsert {
	u.Add(oplog.FieldAutoID, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *OpLogUpsert) SetAppID(v uuid.UUID) *OpLogUpsert {
	u.Set(oplog.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OpLogUpsert) UpdateAppID() *OpLogUpsert {
	u.SetExcluded(oplog.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *OpLogUpsert) ClearAppID() *OpLogUpsert {
	u.SetNull(oplog.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *OpLogUpsert) SetUserID(v uuid.UUID) *OpLogUpsert {
	u.Set(oplog.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OpLogUpsert) UpdateUserID() *OpLogUpsert {
	u.SetExcluded(oplog.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *OpLogUpsert) ClearUserID() *OpLogUpsert {
	u.SetNull(oplog.FieldUserID)
	return u
}

// SetMethod sets the "method" field.
func (u *OpLogUpsert) SetMethod(v string) *OpLogUpsert {
	u.Set(oplog.FieldMethod, v)
	return u
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *OpLogUpsert) UpdateMethod() *OpLogUpsert {
	u.SetExcluded(oplog.FieldMethod)
	return u
}

// ClearMethod clears the value of the "method" field.
func (u *OpLogUpsert) ClearMethod() *OpLogUpsert {
	u.SetNull(oplog.FieldMethod)
	return u
}

// SetArguments sets the "arguments" field.
func (u *OpLogUpsert) SetArguments(v string) *OpLogUpsert {
	u.Set(oplog.FieldArguments, v)
	return u
}

// UpdateArguments sets the "arguments" field to the value that was provided on create.
func (u *OpLogUpsert) UpdateArguments() *OpLogUpsert {
	u.SetExcluded(oplog.FieldArguments)
	return u
}

// ClearArguments clears the value of the "arguments" field.
func (u *OpLogUpsert) ClearArguments() *OpLogUpsert {
	u.SetNull(oplog.FieldArguments)
	return u
}

// SetCurValue sets the "cur_value" field.
func (u *OpLogUpsert) SetCurValue(v string) *OpLogUpsert {
	u.Set(oplog.FieldCurValue, v)
	return u
}

// UpdateCurValue sets the "cur_value" field to the value that was provided on create.
func (u *OpLogUpsert) UpdateCurValue() *OpLogUpsert {
	u.SetExcluded(oplog.FieldCurValue)
	return u
}

// ClearCurValue clears the value of the "cur_value" field.
func (u *OpLogUpsert) ClearCurValue() *OpLogUpsert {
	u.SetNull(oplog.FieldCurValue)
	return u
}

// SetHumanReadable sets the "human_readable" field.
func (u *OpLogUpsert) SetHumanReadable(v string) *OpLogUpsert {
	u.Set(oplog.FieldHumanReadable, v)
	return u
}

// UpdateHumanReadable sets the "human_readable" field to the value that was provided on create.
func (u *OpLogUpsert) UpdateHumanReadable() *OpLogUpsert {
	u.SetExcluded(oplog.FieldHumanReadable)
	return u
}

// ClearHumanReadable clears the value of the "human_readable" field.
func (u *OpLogUpsert) ClearHumanReadable() *OpLogUpsert {
	u.SetNull(oplog.FieldHumanReadable)
	return u
}

// SetResult sets the "result" field.
func (u *OpLogUpsert) SetResult(v string) *OpLogUpsert {
	u.Set(oplog.FieldResult, v)
	return u
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *OpLogUpsert) UpdateResult() *OpLogUpsert {
	u.SetExcluded(oplog.FieldResult)
	return u
}

// ClearResult clears the value of the "result" field.
func (u *OpLogUpsert) ClearResult() *OpLogUpsert {
	u.SetNull(oplog.FieldResult)
	return u
}

// SetFailReason sets the "fail_reason" field.
func (u *OpLogUpsert) SetFailReason(v string) *OpLogUpsert {
	u.Set(oplog.FieldFailReason, v)
	return u
}

// UpdateFailReason sets the "fail_reason" field to the value that was provided on create.
func (u *OpLogUpsert) UpdateFailReason() *OpLogUpsert {
	u.SetExcluded(oplog.FieldFailReason)
	return u
}

// ClearFailReason clears the value of the "fail_reason" field.
func (u *OpLogUpsert) ClearFailReason() *OpLogUpsert {
	u.SetNull(oplog.FieldFailReason)
	return u
}

// SetElapsedMillisecs sets the "elapsed_millisecs" field.
func (u *OpLogUpsert) SetElapsedMillisecs(v uint32) *OpLogUpsert {
	u.Set(oplog.FieldElapsedMillisecs, v)
	return u
}

// UpdateElapsedMillisecs sets the "elapsed_millisecs" field to the value that was provided on create.
func (u *OpLogUpsert) UpdateElapsedMillisecs() *OpLogUpsert {
	u.SetExcluded(oplog.FieldElapsedMillisecs)
	return u
}

// AddElapsedMillisecs adds v to the "elapsed_millisecs" field.
func (u *OpLogUpsert) AddElapsedMillisecs(v uint32) *OpLogUpsert {
	u.Add(oplog.FieldElapsedMillisecs, v)
	return u
}

// ClearElapsedMillisecs clears the value of the "elapsed_millisecs" field.
func (u *OpLogUpsert) ClearElapsedMillisecs() *OpLogUpsert {
	u.SetNull(oplog.FieldElapsedMillisecs)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OpLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oplog.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OpLogUpsertOne) UpdateNewValues() *OpLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oplog.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.OpLog.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *OpLogUpsertOne) Ignore() *OpLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OpLogUpsertOne) DoNothing() *OpLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OpLogCreate.OnConflict
// documentation for more info.
func (u *OpLogUpsertOne) Update(set func(*OpLogUpsert)) *OpLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OpLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OpLogUpsertOne) SetCreatedAt(v uint32) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OpLogUpsertOne) AddCreatedAt(v uint32) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OpLogUpsertOne) UpdateCreatedAt() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OpLogUpsertOne) SetUpdatedAt(v uint32) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OpLogUpsertOne) AddUpdatedAt(v uint32) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OpLogUpsertOne) UpdateUpdatedAt() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OpLogUpsertOne) SetDeletedAt(v uint32) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OpLogUpsertOne) AddDeletedAt(v uint32) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OpLogUpsertOne) UpdateDeletedAt() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAutoID sets the "auto_id" field.
func (u *OpLogUpsertOne) SetAutoID(v uint32) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.SetAutoID(v)
	})
}

// AddAutoID adds v to the "auto_id" field.
func (u *OpLogUpsertOne) AddAutoID(v uint32) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.AddAutoID(v)
	})
}

// UpdateAutoID sets the "auto_id" field to the value that was provided on create.
func (u *OpLogUpsertOne) UpdateAutoID() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateAutoID()
	})
}

// SetAppID sets the "app_id" field.
func (u *OpLogUpsertOne) SetAppID(v uuid.UUID) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OpLogUpsertOne) UpdateAppID() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *OpLogUpsertOne) ClearAppID() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OpLogUpsertOne) SetUserID(v uuid.UUID) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OpLogUpsertOne) UpdateUserID() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *OpLogUpsertOne) ClearUserID() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearUserID()
	})
}

// SetMethod sets the "method" field.
func (u *OpLogUpsertOne) SetMethod(v string) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *OpLogUpsertOne) UpdateMethod() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateMethod()
	})
}

// ClearMethod clears the value of the "method" field.
func (u *OpLogUpsertOne) ClearMethod() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearMethod()
	})
}

// SetArguments sets the "arguments" field.
func (u *OpLogUpsertOne) SetArguments(v string) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.SetArguments(v)
	})
}

// UpdateArguments sets the "arguments" field to the value that was provided on create.
func (u *OpLogUpsertOne) UpdateArguments() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateArguments()
	})
}

// ClearArguments clears the value of the "arguments" field.
func (u *OpLogUpsertOne) ClearArguments() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearArguments()
	})
}

// SetCurValue sets the "cur_value" field.
func (u *OpLogUpsertOne) SetCurValue(v string) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.SetCurValue(v)
	})
}

// UpdateCurValue sets the "cur_value" field to the value that was provided on create.
func (u *OpLogUpsertOne) UpdateCurValue() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateCurValue()
	})
}

// ClearCurValue clears the value of the "cur_value" field.
func (u *OpLogUpsertOne) ClearCurValue() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearCurValue()
	})
}

// SetHumanReadable sets the "human_readable" field.
func (u *OpLogUpsertOne) SetHumanReadable(v string) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.SetHumanReadable(v)
	})
}

// UpdateHumanReadable sets the "human_readable" field to the value that was provided on create.
func (u *OpLogUpsertOne) UpdateHumanReadable() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateHumanReadable()
	})
}

// ClearHumanReadable clears the value of the "human_readable" field.
func (u *OpLogUpsertOne) ClearHumanReadable() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearHumanReadable()
	})
}

// SetResult sets the "result" field.
func (u *OpLogUpsertOne) SetResult(v string) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *OpLogUpsertOne) UpdateResult() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateResult()
	})
}

// ClearResult clears the value of the "result" field.
func (u *OpLogUpsertOne) ClearResult() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearResult()
	})
}

// SetFailReason sets the "fail_reason" field.
func (u *OpLogUpsertOne) SetFailReason(v string) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.SetFailReason(v)
	})
}

// UpdateFailReason sets the "fail_reason" field to the value that was provided on create.
func (u *OpLogUpsertOne) UpdateFailReason() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateFailReason()
	})
}

// ClearFailReason clears the value of the "fail_reason" field.
func (u *OpLogUpsertOne) ClearFailReason() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearFailReason()
	})
}

// SetElapsedMillisecs sets the "elapsed_millisecs" field.
func (u *OpLogUpsertOne) SetElapsedMillisecs(v uint32) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.SetElapsedMillisecs(v)
	})
}

// AddElapsedMillisecs adds v to the "elapsed_millisecs" field.
func (u *OpLogUpsertOne) AddElapsedMillisecs(v uint32) *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.AddElapsedMillisecs(v)
	})
}

// UpdateElapsedMillisecs sets the "elapsed_millisecs" field to the value that was provided on create.
func (u *OpLogUpsertOne) UpdateElapsedMillisecs() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateElapsedMillisecs()
	})
}

// ClearElapsedMillisecs clears the value of the "elapsed_millisecs" field.
func (u *OpLogUpsertOne) ClearElapsedMillisecs() *OpLogUpsertOne {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearElapsedMillisecs()
	})
}

// Exec executes the query.
func (u *OpLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OpLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OpLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OpLogUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OpLogUpsertOne.ID is not supported by MySQL driver. Use OpLogUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OpLogUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OpLogCreateBulk is the builder for creating many OpLog entities in bulk.
type OpLogCreateBulk struct {
	config
	builders []*OpLogCreate
	conflict []sql.ConflictOption
}

// Save creates the OpLog entities in the database.
func (olcb *OpLogCreateBulk) Save(ctx context.Context) ([]*OpLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(olcb.builders))
	nodes := make([]*OpLog, len(olcb.builders))
	mutators := make([]Mutator, len(olcb.builders))
	for i := range olcb.builders {
		func(i int, root context.Context) {
			builder := olcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OpLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, olcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = olcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, olcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, olcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (olcb *OpLogCreateBulk) SaveX(ctx context.Context) []*OpLog {
	v, err := olcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (olcb *OpLogCreateBulk) Exec(ctx context.Context) error {
	_, err := olcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (olcb *OpLogCreateBulk) ExecX(ctx context.Context) {
	if err := olcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OpLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OpLogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (olcb *OpLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *OpLogUpsertBulk {
	olcb.conflict = opts
	return &OpLogUpsertBulk{
		create: olcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OpLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (olcb *OpLogCreateBulk) OnConflictColumns(columns ...string) *OpLogUpsertBulk {
	olcb.conflict = append(olcb.conflict, sql.ConflictColumns(columns...))
	return &OpLogUpsertBulk{
		create: olcb,
	}
}

// OpLogUpsertBulk is the builder for "upsert"-ing
// a bulk of OpLog nodes.
type OpLogUpsertBulk struct {
	create *OpLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OpLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oplog.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OpLogUpsertBulk) UpdateNewValues() *OpLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oplog.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OpLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *OpLogUpsertBulk) Ignore() *OpLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OpLogUpsertBulk) DoNothing() *OpLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OpLogCreateBulk.OnConflict
// documentation for more info.
func (u *OpLogUpsertBulk) Update(set func(*OpLogUpsert)) *OpLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OpLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OpLogUpsertBulk) SetCreatedAt(v uint32) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OpLogUpsertBulk) AddCreatedAt(v uint32) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OpLogUpsertBulk) UpdateCreatedAt() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OpLogUpsertBulk) SetUpdatedAt(v uint32) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OpLogUpsertBulk) AddUpdatedAt(v uint32) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OpLogUpsertBulk) UpdateUpdatedAt() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OpLogUpsertBulk) SetDeletedAt(v uint32) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OpLogUpsertBulk) AddDeletedAt(v uint32) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OpLogUpsertBulk) UpdateDeletedAt() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAutoID sets the "auto_id" field.
func (u *OpLogUpsertBulk) SetAutoID(v uint32) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.SetAutoID(v)
	})
}

// AddAutoID adds v to the "auto_id" field.
func (u *OpLogUpsertBulk) AddAutoID(v uint32) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.AddAutoID(v)
	})
}

// UpdateAutoID sets the "auto_id" field to the value that was provided on create.
func (u *OpLogUpsertBulk) UpdateAutoID() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateAutoID()
	})
}

// SetAppID sets the "app_id" field.
func (u *OpLogUpsertBulk) SetAppID(v uuid.UUID) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OpLogUpsertBulk) UpdateAppID() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *OpLogUpsertBulk) ClearAppID() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OpLogUpsertBulk) SetUserID(v uuid.UUID) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OpLogUpsertBulk) UpdateUserID() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *OpLogUpsertBulk) ClearUserID() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearUserID()
	})
}

// SetMethod sets the "method" field.
func (u *OpLogUpsertBulk) SetMethod(v string) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *OpLogUpsertBulk) UpdateMethod() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateMethod()
	})
}

// ClearMethod clears the value of the "method" field.
func (u *OpLogUpsertBulk) ClearMethod() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearMethod()
	})
}

// SetArguments sets the "arguments" field.
func (u *OpLogUpsertBulk) SetArguments(v string) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.SetArguments(v)
	})
}

// UpdateArguments sets the "arguments" field to the value that was provided on create.
func (u *OpLogUpsertBulk) UpdateArguments() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateArguments()
	})
}

// ClearArguments clears the value of the "arguments" field.
func (u *OpLogUpsertBulk) ClearArguments() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearArguments()
	})
}

// SetCurValue sets the "cur_value" field.
func (u *OpLogUpsertBulk) SetCurValue(v string) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.SetCurValue(v)
	})
}

// UpdateCurValue sets the "cur_value" field to the value that was provided on create.
func (u *OpLogUpsertBulk) UpdateCurValue() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateCurValue()
	})
}

// ClearCurValue clears the value of the "cur_value" field.
func (u *OpLogUpsertBulk) ClearCurValue() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearCurValue()
	})
}

// SetHumanReadable sets the "human_readable" field.
func (u *OpLogUpsertBulk) SetHumanReadable(v string) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.SetHumanReadable(v)
	})
}

// UpdateHumanReadable sets the "human_readable" field to the value that was provided on create.
func (u *OpLogUpsertBulk) UpdateHumanReadable() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateHumanReadable()
	})
}

// ClearHumanReadable clears the value of the "human_readable" field.
func (u *OpLogUpsertBulk) ClearHumanReadable() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearHumanReadable()
	})
}

// SetResult sets the "result" field.
func (u *OpLogUpsertBulk) SetResult(v string) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *OpLogUpsertBulk) UpdateResult() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateResult()
	})
}

// ClearResult clears the value of the "result" field.
func (u *OpLogUpsertBulk) ClearResult() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearResult()
	})
}

// SetFailReason sets the "fail_reason" field.
func (u *OpLogUpsertBulk) SetFailReason(v string) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.SetFailReason(v)
	})
}

// UpdateFailReason sets the "fail_reason" field to the value that was provided on create.
func (u *OpLogUpsertBulk) UpdateFailReason() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateFailReason()
	})
}

// ClearFailReason clears the value of the "fail_reason" field.
func (u *OpLogUpsertBulk) ClearFailReason() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearFailReason()
	})
}

// SetElapsedMillisecs sets the "elapsed_millisecs" field.
func (u *OpLogUpsertBulk) SetElapsedMillisecs(v uint32) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.SetElapsedMillisecs(v)
	})
}

// AddElapsedMillisecs adds v to the "elapsed_millisecs" field.
func (u *OpLogUpsertBulk) AddElapsedMillisecs(v uint32) *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.AddElapsedMillisecs(v)
	})
}

// UpdateElapsedMillisecs sets the "elapsed_millisecs" field to the value that was provided on create.
func (u *OpLogUpsertBulk) UpdateElapsedMillisecs() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.UpdateElapsedMillisecs()
	})
}

// ClearElapsedMillisecs clears the value of the "elapsed_millisecs" field.
func (u *OpLogUpsertBulk) ClearElapsedMillisecs() *OpLogUpsertBulk {
	return u.Update(func(s *OpLogUpsert) {
		s.ClearElapsedMillisecs()
	})
}

// Exec executes the query.
func (u *OpLogUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OpLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OpLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OpLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
