// Code generated by ent, DO NOT EDIT.

package oplog

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/oplog-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethod), v))
	})
}

// Arguments applies equality check predicate on the "arguments" field. It's identical to ArgumentsEQ.
func Arguments(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArguments), v))
	})
}

// CurValue applies equality check predicate on the "cur_value" field. It's identical to CurValueEQ.
func CurValue(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurValue), v))
	})
}

// NewValue applies equality check predicate on the "new_value" field. It's identical to NewValueEQ.
func NewValue(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNewValue), v))
	})
}

// HumanReadable applies equality check predicate on the "human_readable" field. It's identical to HumanReadableEQ.
func HumanReadable(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHumanReadable), v))
	})
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResult), v))
	})
}

// FailReason applies equality check predicate on the "fail_reason" field. It's identical to FailReasonEQ.
func FailReason(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFailReason), v))
	})
}

// ElapsedMillisecs applies equality check predicate on the "elapsed_millisecs" field. It's identical to ElapsedMillisecsEQ.
func ElapsedMillisecs(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldElapsedMillisecs), v))
	})
}

// StatusCode applies equality check predicate on the "status_code" field. It's identical to StatusCodeEQ.
func StatusCode(v int32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusCode), v))
	})
}

// ReqHeaders applies equality check predicate on the "req_headers" field. It's identical to ReqHeadersEQ.
func ReqHeaders(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReqHeaders), v))
	})
}

// RespHeaders applies equality check predicate on the "resp_headers" field. It's identical to RespHeadersEQ.
func RespHeaders(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRespHeaders), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPath), v))
	})
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPath), v...))
	})
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPath), v...))
	})
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPath), v))
	})
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPath), v))
	})
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPath), v))
	})
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPath), v))
	})
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPath), v))
	})
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPath), v))
	})
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPath), v))
	})
}

// PathIsNil applies the IsNil predicate on the "path" field.
func PathIsNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPath)))
	})
}

// PathNotNil applies the NotNil predicate on the "path" field.
func PathNotNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPath)))
	})
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPath), v))
	})
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPath), v))
	})
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethod), v))
	})
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMethod), v))
	})
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMethod), v...))
	})
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMethod), v...))
	})
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMethod), v))
	})
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMethod), v))
	})
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMethod), v))
	})
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMethod), v))
	})
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMethod), v))
	})
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMethod), v))
	})
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMethod), v))
	})
}

// MethodIsNil applies the IsNil predicate on the "method" field.
func MethodIsNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMethod)))
	})
}

// MethodNotNil applies the NotNil predicate on the "method" field.
func MethodNotNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMethod)))
	})
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMethod), v))
	})
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMethod), v))
	})
}

// ArgumentsEQ applies the EQ predicate on the "arguments" field.
func ArgumentsEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArguments), v))
	})
}

// ArgumentsNEQ applies the NEQ predicate on the "arguments" field.
func ArgumentsNEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArguments), v))
	})
}

// ArgumentsIn applies the In predicate on the "arguments" field.
func ArgumentsIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldArguments), v...))
	})
}

// ArgumentsNotIn applies the NotIn predicate on the "arguments" field.
func ArgumentsNotIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldArguments), v...))
	})
}

// ArgumentsGT applies the GT predicate on the "arguments" field.
func ArgumentsGT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldArguments), v))
	})
}

// ArgumentsGTE applies the GTE predicate on the "arguments" field.
func ArgumentsGTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldArguments), v))
	})
}

// ArgumentsLT applies the LT predicate on the "arguments" field.
func ArgumentsLT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldArguments), v))
	})
}

// ArgumentsLTE applies the LTE predicate on the "arguments" field.
func ArgumentsLTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldArguments), v))
	})
}

// ArgumentsContains applies the Contains predicate on the "arguments" field.
func ArgumentsContains(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldArguments), v))
	})
}

// ArgumentsHasPrefix applies the HasPrefix predicate on the "arguments" field.
func ArgumentsHasPrefix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldArguments), v))
	})
}

// ArgumentsHasSuffix applies the HasSuffix predicate on the "arguments" field.
func ArgumentsHasSuffix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldArguments), v))
	})
}

// ArgumentsIsNil applies the IsNil predicate on the "arguments" field.
func ArgumentsIsNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldArguments)))
	})
}

// ArgumentsNotNil applies the NotNil predicate on the "arguments" field.
func ArgumentsNotNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldArguments)))
	})
}

// ArgumentsEqualFold applies the EqualFold predicate on the "arguments" field.
func ArgumentsEqualFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldArguments), v))
	})
}

// ArgumentsContainsFold applies the ContainsFold predicate on the "arguments" field.
func ArgumentsContainsFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldArguments), v))
	})
}

// CurValueEQ applies the EQ predicate on the "cur_value" field.
func CurValueEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurValue), v))
	})
}

// CurValueNEQ applies the NEQ predicate on the "cur_value" field.
func CurValueNEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurValue), v))
	})
}

// CurValueIn applies the In predicate on the "cur_value" field.
func CurValueIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCurValue), v...))
	})
}

// CurValueNotIn applies the NotIn predicate on the "cur_value" field.
func CurValueNotIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCurValue), v...))
	})
}

// CurValueGT applies the GT predicate on the "cur_value" field.
func CurValueGT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurValue), v))
	})
}

// CurValueGTE applies the GTE predicate on the "cur_value" field.
func CurValueGTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurValue), v))
	})
}

// CurValueLT applies the LT predicate on the "cur_value" field.
func CurValueLT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurValue), v))
	})
}

// CurValueLTE applies the LTE predicate on the "cur_value" field.
func CurValueLTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurValue), v))
	})
}

// CurValueContains applies the Contains predicate on the "cur_value" field.
func CurValueContains(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCurValue), v))
	})
}

// CurValueHasPrefix applies the HasPrefix predicate on the "cur_value" field.
func CurValueHasPrefix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCurValue), v))
	})
}

// CurValueHasSuffix applies the HasSuffix predicate on the "cur_value" field.
func CurValueHasSuffix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCurValue), v))
	})
}

// CurValueIsNil applies the IsNil predicate on the "cur_value" field.
func CurValueIsNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurValue)))
	})
}

// CurValueNotNil applies the NotNil predicate on the "cur_value" field.
func CurValueNotNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurValue)))
	})
}

// CurValueEqualFold applies the EqualFold predicate on the "cur_value" field.
func CurValueEqualFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCurValue), v))
	})
}

// CurValueContainsFold applies the ContainsFold predicate on the "cur_value" field.
func CurValueContainsFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCurValue), v))
	})
}

// NewValueEQ applies the EQ predicate on the "new_value" field.
func NewValueEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNewValue), v))
	})
}

// NewValueNEQ applies the NEQ predicate on the "new_value" field.
func NewValueNEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNewValue), v))
	})
}

// NewValueIn applies the In predicate on the "new_value" field.
func NewValueIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNewValue), v...))
	})
}

// NewValueNotIn applies the NotIn predicate on the "new_value" field.
func NewValueNotIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNewValue), v...))
	})
}

// NewValueGT applies the GT predicate on the "new_value" field.
func NewValueGT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNewValue), v))
	})
}

// NewValueGTE applies the GTE predicate on the "new_value" field.
func NewValueGTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNewValue), v))
	})
}

// NewValueLT applies the LT predicate on the "new_value" field.
func NewValueLT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNewValue), v))
	})
}

// NewValueLTE applies the LTE predicate on the "new_value" field.
func NewValueLTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNewValue), v))
	})
}

// NewValueContains applies the Contains predicate on the "new_value" field.
func NewValueContains(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNewValue), v))
	})
}

// NewValueHasPrefix applies the HasPrefix predicate on the "new_value" field.
func NewValueHasPrefix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNewValue), v))
	})
}

// NewValueHasSuffix applies the HasSuffix predicate on the "new_value" field.
func NewValueHasSuffix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNewValue), v))
	})
}

// NewValueIsNil applies the IsNil predicate on the "new_value" field.
func NewValueIsNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNewValue)))
	})
}

// NewValueNotNil applies the NotNil predicate on the "new_value" field.
func NewValueNotNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNewValue)))
	})
}

// NewValueEqualFold applies the EqualFold predicate on the "new_value" field.
func NewValueEqualFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNewValue), v))
	})
}

// NewValueContainsFold applies the ContainsFold predicate on the "new_value" field.
func NewValueContainsFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNewValue), v))
	})
}

// HumanReadableEQ applies the EQ predicate on the "human_readable" field.
func HumanReadableEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHumanReadable), v))
	})
}

// HumanReadableNEQ applies the NEQ predicate on the "human_readable" field.
func HumanReadableNEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHumanReadable), v))
	})
}

// HumanReadableIn applies the In predicate on the "human_readable" field.
func HumanReadableIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHumanReadable), v...))
	})
}

// HumanReadableNotIn applies the NotIn predicate on the "human_readable" field.
func HumanReadableNotIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHumanReadable), v...))
	})
}

// HumanReadableGT applies the GT predicate on the "human_readable" field.
func HumanReadableGT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHumanReadable), v))
	})
}

// HumanReadableGTE applies the GTE predicate on the "human_readable" field.
func HumanReadableGTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHumanReadable), v))
	})
}

// HumanReadableLT applies the LT predicate on the "human_readable" field.
func HumanReadableLT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHumanReadable), v))
	})
}

// HumanReadableLTE applies the LTE predicate on the "human_readable" field.
func HumanReadableLTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHumanReadable), v))
	})
}

// HumanReadableContains applies the Contains predicate on the "human_readable" field.
func HumanReadableContains(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHumanReadable), v))
	})
}

// HumanReadableHasPrefix applies the HasPrefix predicate on the "human_readable" field.
func HumanReadableHasPrefix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHumanReadable), v))
	})
}

// HumanReadableHasSuffix applies the HasSuffix predicate on the "human_readable" field.
func HumanReadableHasSuffix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHumanReadable), v))
	})
}

// HumanReadableIsNil applies the IsNil predicate on the "human_readable" field.
func HumanReadableIsNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHumanReadable)))
	})
}

// HumanReadableNotNil applies the NotNil predicate on the "human_readable" field.
func HumanReadableNotNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHumanReadable)))
	})
}

// HumanReadableEqualFold applies the EqualFold predicate on the "human_readable" field.
func HumanReadableEqualFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHumanReadable), v))
	})
}

// HumanReadableContainsFold applies the ContainsFold predicate on the "human_readable" field.
func HumanReadableContainsFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHumanReadable), v))
	})
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResult), v))
	})
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResult), v))
	})
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldResult), v...))
	})
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldResult), v...))
	})
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResult), v))
	})
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResult), v))
	})
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResult), v))
	})
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResult), v))
	})
}

// ResultContains applies the Contains predicate on the "result" field.
func ResultContains(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResult), v))
	})
}

// ResultHasPrefix applies the HasPrefix predicate on the "result" field.
func ResultHasPrefix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResult), v))
	})
}

// ResultHasSuffix applies the HasSuffix predicate on the "result" field.
func ResultHasSuffix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResult), v))
	})
}

// ResultIsNil applies the IsNil predicate on the "result" field.
func ResultIsNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResult)))
	})
}

// ResultNotNil applies the NotNil predicate on the "result" field.
func ResultNotNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResult)))
	})
}

// ResultEqualFold applies the EqualFold predicate on the "result" field.
func ResultEqualFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResult), v))
	})
}

// ResultContainsFold applies the ContainsFold predicate on the "result" field.
func ResultContainsFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResult), v))
	})
}

// FailReasonEQ applies the EQ predicate on the "fail_reason" field.
func FailReasonEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFailReason), v))
	})
}

// FailReasonNEQ applies the NEQ predicate on the "fail_reason" field.
func FailReasonNEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFailReason), v))
	})
}

// FailReasonIn applies the In predicate on the "fail_reason" field.
func FailReasonIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFailReason), v...))
	})
}

// FailReasonNotIn applies the NotIn predicate on the "fail_reason" field.
func FailReasonNotIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFailReason), v...))
	})
}

// FailReasonGT applies the GT predicate on the "fail_reason" field.
func FailReasonGT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFailReason), v))
	})
}

// FailReasonGTE applies the GTE predicate on the "fail_reason" field.
func FailReasonGTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFailReason), v))
	})
}

// FailReasonLT applies the LT predicate on the "fail_reason" field.
func FailReasonLT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFailReason), v))
	})
}

// FailReasonLTE applies the LTE predicate on the "fail_reason" field.
func FailReasonLTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFailReason), v))
	})
}

// FailReasonContains applies the Contains predicate on the "fail_reason" field.
func FailReasonContains(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFailReason), v))
	})
}

// FailReasonHasPrefix applies the HasPrefix predicate on the "fail_reason" field.
func FailReasonHasPrefix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFailReason), v))
	})
}

// FailReasonHasSuffix applies the HasSuffix predicate on the "fail_reason" field.
func FailReasonHasSuffix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFailReason), v))
	})
}

// FailReasonIsNil applies the IsNil predicate on the "fail_reason" field.
func FailReasonIsNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFailReason)))
	})
}

// FailReasonNotNil applies the NotNil predicate on the "fail_reason" field.
func FailReasonNotNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFailReason)))
	})
}

// FailReasonEqualFold applies the EqualFold predicate on the "fail_reason" field.
func FailReasonEqualFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFailReason), v))
	})
}

// FailReasonContainsFold applies the ContainsFold predicate on the "fail_reason" field.
func FailReasonContainsFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFailReason), v))
	})
}

// ElapsedMillisecsEQ applies the EQ predicate on the "elapsed_millisecs" field.
func ElapsedMillisecsEQ(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldElapsedMillisecs), v))
	})
}

// ElapsedMillisecsNEQ applies the NEQ predicate on the "elapsed_millisecs" field.
func ElapsedMillisecsNEQ(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldElapsedMillisecs), v))
	})
}

// ElapsedMillisecsIn applies the In predicate on the "elapsed_millisecs" field.
func ElapsedMillisecsIn(vs ...uint32) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldElapsedMillisecs), v...))
	})
}

// ElapsedMillisecsNotIn applies the NotIn predicate on the "elapsed_millisecs" field.
func ElapsedMillisecsNotIn(vs ...uint32) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldElapsedMillisecs), v...))
	})
}

// ElapsedMillisecsGT applies the GT predicate on the "elapsed_millisecs" field.
func ElapsedMillisecsGT(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldElapsedMillisecs), v))
	})
}

// ElapsedMillisecsGTE applies the GTE predicate on the "elapsed_millisecs" field.
func ElapsedMillisecsGTE(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldElapsedMillisecs), v))
	})
}

// ElapsedMillisecsLT applies the LT predicate on the "elapsed_millisecs" field.
func ElapsedMillisecsLT(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldElapsedMillisecs), v))
	})
}

// ElapsedMillisecsLTE applies the LTE predicate on the "elapsed_millisecs" field.
func ElapsedMillisecsLTE(v uint32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldElapsedMillisecs), v))
	})
}

// ElapsedMillisecsIsNil applies the IsNil predicate on the "elapsed_millisecs" field.
func ElapsedMillisecsIsNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldElapsedMillisecs)))
	})
}

// ElapsedMillisecsNotNil applies the NotNil predicate on the "elapsed_millisecs" field.
func ElapsedMillisecsNotNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldElapsedMillisecs)))
	})
}

// StatusCodeEQ applies the EQ predicate on the "status_code" field.
func StatusCodeEQ(v int32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusCode), v))
	})
}

// StatusCodeNEQ applies the NEQ predicate on the "status_code" field.
func StatusCodeNEQ(v int32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusCode), v))
	})
}

// StatusCodeIn applies the In predicate on the "status_code" field.
func StatusCodeIn(vs ...int32) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatusCode), v...))
	})
}

// StatusCodeNotIn applies the NotIn predicate on the "status_code" field.
func StatusCodeNotIn(vs ...int32) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatusCode), v...))
	})
}

// StatusCodeGT applies the GT predicate on the "status_code" field.
func StatusCodeGT(v int32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusCode), v))
	})
}

// StatusCodeGTE applies the GTE predicate on the "status_code" field.
func StatusCodeGTE(v int32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusCode), v))
	})
}

// StatusCodeLT applies the LT predicate on the "status_code" field.
func StatusCodeLT(v int32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusCode), v))
	})
}

// StatusCodeLTE applies the LTE predicate on the "status_code" field.
func StatusCodeLTE(v int32) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusCode), v))
	})
}

// StatusCodeIsNil applies the IsNil predicate on the "status_code" field.
func StatusCodeIsNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatusCode)))
	})
}

// StatusCodeNotNil applies the NotNil predicate on the "status_code" field.
func StatusCodeNotNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatusCode)))
	})
}

// ReqHeadersEQ applies the EQ predicate on the "req_headers" field.
func ReqHeadersEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReqHeaders), v))
	})
}

// ReqHeadersNEQ applies the NEQ predicate on the "req_headers" field.
func ReqHeadersNEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReqHeaders), v))
	})
}

// ReqHeadersIn applies the In predicate on the "req_headers" field.
func ReqHeadersIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReqHeaders), v...))
	})
}

// ReqHeadersNotIn applies the NotIn predicate on the "req_headers" field.
func ReqHeadersNotIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReqHeaders), v...))
	})
}

// ReqHeadersGT applies the GT predicate on the "req_headers" field.
func ReqHeadersGT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReqHeaders), v))
	})
}

// ReqHeadersGTE applies the GTE predicate on the "req_headers" field.
func ReqHeadersGTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReqHeaders), v))
	})
}

// ReqHeadersLT applies the LT predicate on the "req_headers" field.
func ReqHeadersLT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReqHeaders), v))
	})
}

// ReqHeadersLTE applies the LTE predicate on the "req_headers" field.
func ReqHeadersLTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReqHeaders), v))
	})
}

// ReqHeadersContains applies the Contains predicate on the "req_headers" field.
func ReqHeadersContains(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReqHeaders), v))
	})
}

// ReqHeadersHasPrefix applies the HasPrefix predicate on the "req_headers" field.
func ReqHeadersHasPrefix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReqHeaders), v))
	})
}

// ReqHeadersHasSuffix applies the HasSuffix predicate on the "req_headers" field.
func ReqHeadersHasSuffix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReqHeaders), v))
	})
}

// ReqHeadersIsNil applies the IsNil predicate on the "req_headers" field.
func ReqHeadersIsNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReqHeaders)))
	})
}

// ReqHeadersNotNil applies the NotNil predicate on the "req_headers" field.
func ReqHeadersNotNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReqHeaders)))
	})
}

// ReqHeadersEqualFold applies the EqualFold predicate on the "req_headers" field.
func ReqHeadersEqualFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReqHeaders), v))
	})
}

// ReqHeadersContainsFold applies the ContainsFold predicate on the "req_headers" field.
func ReqHeadersContainsFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReqHeaders), v))
	})
}

// RespHeadersEQ applies the EQ predicate on the "resp_headers" field.
func RespHeadersEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRespHeaders), v))
	})
}

// RespHeadersNEQ applies the NEQ predicate on the "resp_headers" field.
func RespHeadersNEQ(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRespHeaders), v))
	})
}

// RespHeadersIn applies the In predicate on the "resp_headers" field.
func RespHeadersIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRespHeaders), v...))
	})
}

// RespHeadersNotIn applies the NotIn predicate on the "resp_headers" field.
func RespHeadersNotIn(vs ...string) predicate.OpLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRespHeaders), v...))
	})
}

// RespHeadersGT applies the GT predicate on the "resp_headers" field.
func RespHeadersGT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRespHeaders), v))
	})
}

// RespHeadersGTE applies the GTE predicate on the "resp_headers" field.
func RespHeadersGTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRespHeaders), v))
	})
}

// RespHeadersLT applies the LT predicate on the "resp_headers" field.
func RespHeadersLT(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRespHeaders), v))
	})
}

// RespHeadersLTE applies the LTE predicate on the "resp_headers" field.
func RespHeadersLTE(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRespHeaders), v))
	})
}

// RespHeadersContains applies the Contains predicate on the "resp_headers" field.
func RespHeadersContains(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRespHeaders), v))
	})
}

// RespHeadersHasPrefix applies the HasPrefix predicate on the "resp_headers" field.
func RespHeadersHasPrefix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRespHeaders), v))
	})
}

// RespHeadersHasSuffix applies the HasSuffix predicate on the "resp_headers" field.
func RespHeadersHasSuffix(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRespHeaders), v))
	})
}

// RespHeadersIsNil applies the IsNil predicate on the "resp_headers" field.
func RespHeadersIsNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRespHeaders)))
	})
}

// RespHeadersNotNil applies the NotNil predicate on the "resp_headers" field.
func RespHeadersNotNil() predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRespHeaders)))
	})
}

// RespHeadersEqualFold applies the EqualFold predicate on the "resp_headers" field.
func RespHeadersEqualFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRespHeaders), v))
	})
}

// RespHeadersContainsFold applies the ContainsFold predicate on the "resp_headers" field.
func RespHeadersContainsFold(v string) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRespHeaders), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OpLog) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OpLog) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OpLog) predicate.OpLog {
	return predicate.OpLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
